# -*- coding: utf-8 -*-
"""NBA Top 5 Players

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_Wwojo4cxfLmMyFhgSGBIEdf7-lU0CH

Code made with assistance from https://machinelearningmastery.com/implement-decision-tree-algorithm-scratch-python/
"""

import pandas as pd
from google.colab import files
uploaded = files.upload()
import io
james = pd.read_csv(io.BytesIO(uploaded['James.csv']))
lebron = pd.read_csv(io.BytesIO(uploaded['LeBron.csv']))
giannis = pd.read_csv(io.BytesIO(uploaded['Giannis.csv']))
luka = pd.read_csv(io.BytesIO(uploaded['Luka.csv']))
damian = pd.read_csv(io.BytesIO(uploaded['Damian.csv']))

damian['Home'] = damian['Home'].fillna(1)
james['Home'] = james['Home'].fillna(1)
lebron['Home'] = lebron['Home'].fillna(1)
luka['Home'] = luka['Home'].fillna(1)
giannis['Home'] = giannis['Home'].fillna(1)

home = {1:1, '@': 0}
damian.Home = [home[item] for item in damian.Home] 
james.Home = [home[item] for item in james.Home] 
lebron.Home = [home[item] for item in lebron.Home] 
giannis.Home = [home[item] for item in giannis.Home] 
luka.Home = [home[item] for item in luka.Home]

luka.loc[luka['Outcome'].str.startswith("W"), 'Outcome'] = "1"
luka.loc[luka['Outcome'].str.startswith("L"), 'Outcome'] = "0"

damian.loc[damian['Outcome'].str.startswith("W"), 'Outcome'] = "1"
damian.loc[damian['Outcome'].str.startswith("L"), 'Outcome'] = "0"

giannis.loc[giannis['Outcome'].str.startswith("W"), 'Outcome'] = "1"
giannis.loc[giannis['Outcome'].str.startswith("L"), 'Outcome'] = "0"

lebron.loc[lebron['Outcome'].str.startswith("W"), 'Outcome'] = "1"
lebron.loc[lebron['Outcome'].str.startswith("L"), 'Outcome'] = "0"

james.loc[james['Outcome'].str.startswith("W"), 'Outcome'] = "1"
james.loc[james['Outcome'].str.startswith("L"), 'Outcome'] = "0"

outcome = {'1':1, '0': 0}
damian.Outcome = [outcome[item] for item in damian.Outcome] 
james.Outcome = [outcome[item] for item in james.Outcome] 
lebron.Outcome = [outcome[item] for item in lebron.Outcome] 
giannis.Outcome = [outcome[item] for item in giannis.Outcome] 
luka.Outcome = [outcome[item] for item in luka.Outcome]

damian.to_csv(r'C:\Users\twgeh\Documents\FALL20\Machine Learning\Final_Project\NBA_Top_5\All Cleaned Up\damian.csv', index = False)
james.to_csv(r'C:\Users\twgeh\Documents\FALL20\Machine Learning\Final_Project\NBA_Top_5\All Cleaned Up\james.csv', index = False)
lebron.to_csv(r'C:\Users\twgeh\Documents\FALL20\Machine Learning\Final_Project\NBA_Top_5\All Cleaned Up\lebron.csv', index = False)
giannis.to_csv(r'C:\Users\twgeh\Documents\FALL20\Machine Learning\Final_Project\NBA_Top_5\All Cleaned Up\giannis.csv', index = False)
luka.to_csv(r'C:\Users\twgeh\Documents\FALL20\Machine Learning\Final_Project\NBA_Top_5\All Cleaned Up\luka.csv', index = False)

luka['FT%'] = luka['FT%'].fillna(0)
lebron['FT%'] = lebron['FT%'].fillna(0)
james['FT%'] = james['FT%'].fillna(0)
damian['FT%'] = damian['FT%'].fillna(0)
giannis['FT%'] = giannis['FT%'].fillna(0)
luka['FG%'] = luka['FG%'].fillna(0)
lebron['FG%'] = lebron['FG%'].fillna(0)
james['FG%'] = james['FG%'].fillna(0)
damian['FG%'] = damian['FG%'].fillna(0)
giannis['FG%'] = giannis['FG%'].fillna(0)
luka['3P%'] = luka['3P%'].fillna(0)
lebron['3P%'] = lebron['3P%'].fillna(0)
james['3P%'] = james['3P%'].fillna(0)
damian['3P%'] = damian['3P%'].fillna(0)
giannis['3P%'] = giannis['3P%'].fillna(0)

giannis = giannis.drop(columns=['Diff', 'MP', '+/-'])
luka = luka.drop(columns=['Diff', 'MP', '+/-'])
lebron = lebron.drop(columns=['Diff', 'MP', '+/-'])
damian = damian.drop(columns=['Diff', 'MP', '+/-'])
james = james.drop(columns=['Diff', 'MP', '+/-'])

giannis = giannis[["Home", "FGA", "FG%", "3PA", "3P%", "FTA", "FT%", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "Outcome"]]
luka = luka[["Home", "FGA", "FG%", "3PA", "3P%", "FTA", "FT%", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "Outcome"]]
lebron = lebron[["Home", "FGA", "FG%", "3PA", "3P%", "FTA", "FT%", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "Outcome"]]
damian = damian[["Home", "FGA", "FG%", "3PA", "3P%", "FTA", "FT%", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "Outcome"]]
james = james[["Home", "FGA", "FG%", "3PA", "3P%", "FTA", "FT%", "ORB", "DRB", "TRB", "AST", "STL", "BLK", "TOV", "PF", "PTS", "GmSc", "Outcome"]]

giannis

from random import seed
from random import randrange

def fold_data(data, n_folds):
	folded_data = list()
	data = data.values.tolist()
	fold_size = int(len(data) / n_folds)
	for i in range(n_folds):
		fold = list()
		while len(fold) < fold_size:
			index = randrange(len(data))
			fold.append(data.pop(index))
		folded_data.append(fold)
	return folded_data

def calculate_accuracy(actual, prediction):
	correct = 0
	for i in range(len(actual)):
		if actual[i] == prediction[i]:
			correct += 1
	return correct / len(actual) * 100


def evaluate_algorithm(data, algorithm, n_folds, *args):
	folds = fold_data(data, n_folds)
	scores = list()
	for fold in folds:
		train_set = list(folds)
		train_set.remove(fold)
		train_set = sum(train_set, [])
		test_set = list()
		for row in fold:
			row_copy = list(row)
			test_set.append(row_copy)
			row_copy[-1] = None
		predicted = algorithm(train_set, test_set, *args)
		actual = [row[-1] for row in fold]
		accuracy = accuracy_metric(actual, predicted)

		scores.append(accuracy)
	return scores, predicted, actual

# Split a dataset based on an attribute and an attribute value
def test_split(index, value, data):
	left, right = list(), list()
	for row in data:
		if row[index] < value:
			left.append(row)
		else:
			right.append(row)
	return left, right

def gini(groups, classes):
	n_instances = float(sum([len(group) for group in groups]))
	gini = 0.0
	for group in groups:
		size = float(len(group))
		if size == 0:
			continue
		score = 0.0
		for class_val in classes:
			p = [row[-1] for row in group].count(class_val) / size
			score += p * p
		gini += (1.0 - score) * (size / n_instances)
	return gini

def get_split(data):
	class_values = list(set(row[-1] for row in data))
	b_index, b_value, b_score, b_groups = 999, 999, 999, None
	for index in range(len(data[0])-1):
		for row in data:
			groups = test_split(index, row[index], data)
			gini_val = gini(groups, class_values)
			if gini_val < b_score:
				b_index, b_value, b_score, b_groups = index, row[index], gini_val, groups
	return {'index':b_index, 'value':b_value, 'groups':b_groups}

def make_end_node(group):
	outcomes = [row[-1] for row in group]
	return max(set(outcomes), key=outcomes.count)

def split(node, max_depth, min_size, depth):
	left, right = node['groups']
	del(node['groups'])
	if not left or not right:
		node['left'] = node['right'] = make_end_node(left + right)
		return
	if depth >= max_depth:
		node['left'], node['right'] = make_end_node(left), make_end_node(right)
		return
	if len(left) <= min_size:
		node['left'] = make_end_node(left)
	else:
		node['left'] = get_split(left)
		split(node['left'], max_depth, min_size, depth+1)
	if len(right) <= min_size:
		node['right'] = make_end_node(right)
	else:
		node['right'] = get_split(right)
		split(node['right'], max_depth, min_size, depth+1)

def build_tree(train, max_depth, min_size):
	root = get_split(train)
	split(root, max_depth, min_size, 1)
	return root

def predict(node, row):
	if row[node['index']] < node['value']:
		if isinstance(node['left'], dict):
			return predict(node['left'], row)
		else:
			return node['left']
	else:
		if isinstance(node['right'], dict):
			return predict(node['right'], row)
		else:
			return node['right']

def decision_tree(train, test, max_depth, min_size):
	tree = build_tree(train, max_depth, min_size)
	predictions = list()
	for row in test:
		prediction = predict(tree, row)
		predictions.append(prediction)
	return(predictions)

# Test CART on Bank Note dataset
seed(0)
giannis_predicted = list()
giannis_actual = list()
giannis_scores, giannis_predicted, giannis_actual = evaluate_algorithm(giannis, decision_tree, 5, 5, 10)

lebron_predicted = list()
lebron_actual = list()
lebron_scores, lebron_predicted, lebron_actual = evaluate_algorithm(lebron, decision_tree, 5, 5, 10)

damian_predicted = list()
damian_actual = list()
damian_scores, damian_predicted, damian_actual = evaluate_algorithm(damian, decision_tree, 5, 5, 10)

james_predicted = list()
james_actual = list()
james_scores, james_predicted, james_actual = evaluate_algorithm(james, decision_tree, 5, 5, 10)

luka_predicted = list()
luka_actual = list()
luka_scores, luka_predicted, luka_actual = evaluate_algorithm(luka, decision_tree, 5, 5, 10)

seed(1)
giannis_scores2, giannis_predicted, giannis_actual = evaluate_algorithm(giannis, decision_tree, 5, 5, 10)
lebron_scores2, lebron_predicted, lebron_actual = evaluate_algorithm(lebron, decision_tree, 5, 5, 10)
damian_scores2, damian_predicted, damian_actual = evaluate_algorithm(damian, decision_tree, 5, 5, 10)
james_scores2, james_predicted, james_actual = evaluate_algorithm(james, decision_tree, 5, 5, 10)
luka_scores2, luka_predicted, luka_actual = evaluate_algorithm(luka, decision_tree, 5, 5, 10)

seed(2)
giannis_scores3, giannis_predicted, giannis_actual = evaluate_algorithm(giannis, decision_tree, 5, 5, 10)
lebron_scores3, lebron_predicted, lebron_actual = evaluate_algorithm(lebron, decision_tree, 5, 5, 10)
damian_scores3, damian_predicted, damian_actual = evaluate_algorithm(damian, decision_tree, 5, 5, 10)
james_scores3, james_predicted, james_actual = evaluate_algorithm(james, decision_tree, 5, 5, 10)
luka_scores3, luka_predicted, luka_actual = evaluate_algorithm(luka, decision_tree, 5, 5, 10)
seed(3)
giannis_scores4, giannis_predicted, giannis_actual = evaluate_algorithm(giannis, decision_tree, 5, 5, 10)
lebron_scores4, lebron_predicted, lebron_actual = evaluate_algorithm(lebron, decision_tree, 5, 5, 10)
damian_scores4, damian_predicted, damian_actual = evaluate_algorithm(damian, decision_tree, 5, 5, 10)
james_scores4, james_predicted, james_actual = evaluate_algorithm(james, decision_tree, 5, 5, 10)
luka_scores4, luka_predicted, luka_actual = evaluate_algorithm(luka, decision_tree, 5, 5, 10)

print('Giannis: %s' % (sum(giannis_scores+giannis_scores2+giannis_scores3+giannis_scores4)/20))
print('LeBron: %s' % (sum(lebron_scores+lebron_scores2+lebron_scores3+lebron_scores4)/20))
print('Harden: %s' % (sum(james_scores+james_scores2+james_scores3+james_scores4)/20))
print('Lillard: %s' % (sum(damian_scores+damian_scores2+damian_scores3+damian_scores4)/20))
print('Doncic: %s' % (sum(luka_scores+luka_scores2+luka_scores3+luka_scores4)/20))

plt.plot(luka_actual, c="blue", label="actual", marker='o', linestyle='none')
plt.plot(luka_predicted, c="red", label="predicted")
plt.xlabel("Games")
plt.ylabel("Game Outcome")
plt.title("Decision Tree Prediction for Luka Doncic")
plt.legend()

plt.axis([0, 10, -0.5, 1.5])
plt.yticks([0,1],['Loss', 'Win'])

plt.show()

plt.plot(james_actual, c="blue", label="actual", marker='o', linestyle='none')
plt.plot(james_predicted, c="red", label="predicted")
plt.xlabel("Games")
plt.ylabel("Game Outcome")
plt.title("Decision Tree Prediction for James Harden")
plt.legend()

plt.axis([0, 10, -0.5, 1.5])
plt.yticks([0,1],['Loss', 'Win'])

plt.show()

plt.plot(lebron_actual, c="blue", label="actual", marker='o', linestyle='none')
plt.plot(lebron_predicted, c="red", label="predicted")
plt.xlabel("Games")
plt.ylabel("Game Outcome")
plt.title("Decision Tree Prediction for LeBron James")
plt.legend()

plt.axis([0, 10, -0.5, 1.5])
plt.yticks([0,1],['Loss', 'Win'])

plt.show()

plt.plot(damian_actual, c="blue", label="actual", marker='o', linestyle='none')
plt.plot(damian_predicted, c="red", label="predicted")
plt.xlabel("Games")
plt.ylabel("Game Outcome")
plt.title("Decision Tree Prediction for Damian Lillard")
plt.legend()

plt.axis([0, 10, -0.5, 1.5])
plt.yticks([0,1],['Loss', 'Win'])

plt.show()

import matplotlib.pyplot as plt

plt.plot(actual, c="blue", label="actual", marker='o', linestyle='none')
plt.plot(predicted, c="red", label="predicted")
plt.xlabel("Games")
plt.ylabel("Game Outcome")
plt.title("Decision Tree Prediction for Giannis Antetokounmpo")
plt.legend()

plt.axis([0, 10, -0.5, 1.5])
plt.yticks([0,1],['Loss', 'Win'])

plt.show()

giannis