# -*- coding: utf-8 -*-
"""Basketball_Linear_Reg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/145axD1PkIOKXGXqz7NVfYV0vol-JuIfY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class LinearReg(object):
  def __init__(self):
    self.coefficients = []

  #changes input data into usable form and trains the agent
  def fit(self, X, y):
    if(len(X.shape)) == 1:
      X = self._reshape(X)
    X = self._concatenate(X)
    #calculates the coefficients using linear regression
    #form is beta = (X^T dot X)^-1 dot X^T dot y
    self.coefficients = np.linalg.inv(X.transpose().dot(X)).dot(X.transpose()).dot(y)
  
  #reshapes X into a 2D array
  def _reshape(self, X):
    return X.reshape(-1,1)

  #creates an array of 1's with the same number of elements as a column of X
  def _concatenate(self, X):
    ones = np.ones(shape=X.shape[0]).reshape(-1,1)
    return np.concatenate((ones, X), 1)

  #predicts an outcome based on input data and coefficients
  def predict(self, entry):
    #y-intercept
    beta_0 = self.coefficients[0]
    other_betas = self.coefficients[1:]
    prediction = beta_0

    for x_i, beta_i in zip(entry, other_betas):
      prediction += (beta_i * x_i)
    
    return prediction

  #changes input data into usable form without training the agent
  def fit_test(self, X):
    if(len(X.shape)) == 1:
      X = self._reshape(X)
    X = self._concatenate(X)

#data the model trains off of
training_set = pd.read_csv('lebron_training.csv')

#input data
X = training_set.drop(columns=['Outcome', 'Diff', 'MP']).values
#actual outcomes
y = training_set['Diff'].values

#trains the model
model = LinearReg()
model.fit(X, y)

#data the model predicts
testing_set = pd.read_csv('lebron_testing.csv')

#input data
X_test = testing_set.drop(columns=['Outcome', 'Diff', 'MP']).values
#actual outcomes
y_test = testing_set['Diff'].values

#Reorganizes input data
model.fit_test(X_test)

x_axis = []
y_axis = []

for i in range(len(y_test)):
  x_axis.append(i+1)

#scatter plot of actual results
plt.plot(x_axis, y_test, 'o', label="Actual Results")

#finds all the predicted outcomes
for i in range(len(X_test)):
  y_axis.append(model.predict(X_test[i]))

#calculates the accuracy of the results in regards to overall win or loss
num_failed = 0

for i in range(len(y_test)):
  if np.sign(y_test[i]) != np.sign(y_axis[i]):
    num_failed = num_failed + 1

print(100 - num_failed / len(y_axis) * 100)

#line graph of predicted results
plt.plot(x_axis, y_axis, linewidth=1, label="Predicted Results")

plt.title("Actual Results vs Predicted Results in Basketball Games Using Linear Regression")
plt.xlabel("Game Number in Current Season")
plt.ylabel("Point Differential at End of Game")

plt.legend(loc="best")
plt.show()